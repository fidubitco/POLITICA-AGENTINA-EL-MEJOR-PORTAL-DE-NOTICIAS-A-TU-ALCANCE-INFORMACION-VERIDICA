// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(VIEWER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  articles Article[]
  comments Comment[]
  likes    Like[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Article {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  excerpt     String
  content     String
  category    String
  categorySlug String
  authorId    String
  imageUrl    String?
  status      ArticleStatus @default(DRAFT)
  featured    Boolean     @default(false)
  breaking    Boolean     @default(false)
  views       Int         @default(0)
  likes       Int         @default(0)
  shares      Int         @default(0)
  publishedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    Like[]
  tags     Tag[]

  // Translations
  translations ArticleTranslation[]

  // SEO
  seoTitle       String?
  seoDescription String?
  keywords       String[]

  @@index([categorySlug])
  @@index([status])
  @@index([publishedAt])
  @@index([featured])
}

model ArticleTranslation {
  id         String @id @default(cuid())
  articleId  String
  language   String
  title      String
  excerpt    String
  content    String
  seoTitle   String?
  seoDescription String?

  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([articleId, language])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  articleId String
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author  User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  article Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  replies Comment[] @relation("CommentReplies")
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId])
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  slug  String @unique

  articles Article[]
}

model Category {
  id          String @id @default(cuid())
  name        String
  slug        String @unique
  description String
  icon        String
  color       String
  order       Int    @default(0)
  active      Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subcategories Subcategory[]
}

model Subcategory {
  id          String @id @default(cuid())
  name        String
  slug        String @unique
  description String
  categoryId  String
  order       Int    @default(0)
  active      Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model KnowledgeBaseEntry {
  id          String @id @default(cuid())
  title       String
  content     String
  type        KnowledgeType
  category    String
  tags        String[]
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([type])
  @@index([category])
}

model AnalyticsEvent {
  id        String   @id @default(cuid())
  event     String
  category  String
  action    String
  label     String?
  value     Int?
  userId    String?
  sessionId String?
  page      String?
  referrer  String?
  userAgent String?
  ip        String?
  timestamp DateTime @default(now())

  @@index([event])
  @@index([category])
  @@index([timestamp])
}

enum Role {
  VIEWER
  EDITOR
  ADMIN
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum KnowledgeType {
  TEXT
  PDF
  AUDIO
  VIDEO
  LINK
}