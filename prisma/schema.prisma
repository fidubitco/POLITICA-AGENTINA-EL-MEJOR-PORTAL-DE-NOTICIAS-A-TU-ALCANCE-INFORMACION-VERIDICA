// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      String   @default("editor") // admin, editor, journalist
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  articles  Article[]
  sessions  Session[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Article {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String
  content     String   @db.Text
  category    String
  categorySlug String
  authorId    String
  imageUrl    String
  status      String   @default("draft") // draft, published, archived
  featured    Boolean  @default(false)
  breaking    Boolean  @default(false)
  views       Int      @default(0)
  likes       Int      @default(0)
  shares      Int      @default(0)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id])
  tags   ArticleTag[]

  @@map("articles")
}

model ArticleTag {
  id        String @id @default(cuid())
  articleId String
  tagId     String

  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([articleId, tagId])
  @@map("article_tags")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())

  articles ArticleTag[]

  @@map("tags")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  icon        String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("categories")
}

model KnowledgeBase {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  type        String   // text, pdf, audio, video, link
  url         String?  // for external links or file URLs
  tags        String[] // for AI search
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("knowledge_base")
}

model Analytics {
  id        String   @id @default(cuid())
  event     String
  data      Json
  userId    String?
  articleId String?
  createdAt DateTime @default(now())

  @@map("analytics")
}

model Settings {
  id    String @id @default(cuid())
  key   String @unique
  value Json

  @@map("settings")
}
