// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("admin")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  articles      Article[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Article {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String?
  excerpt     String?
  category    String
  tags        String[]
  status      String   @default("draft")
  featured    Boolean  @default(false)
  breaking    Boolean  @default(false)
  imageUrl    String?
  mediaType   String   @default("text")
  mediaUrl    String?
  views       Int      @default(0)
  likes       Int      @default(0)
  shares      Int      @default(0)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Category {
  id          String @id @default(cuid())
  name        String @unique
  slug        String @unique
  description String?
  imageUrl    String?
  order       Int    @default(0)
  active      Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Media {
  id          String   @id @default(cuid())
  name        String
  url         String
  type        String
  size        Int
  mimeType    String
  alt         String?
  uploadedBy  String
  createdAt   DateTime @default(now())
}

model Analytics {
  id        String   @id @default(cuid())
  articleId String?
  event     String
  data      Json?
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
}
